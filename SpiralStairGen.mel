{
    //StepCreation(        16,                      .35,                     5,                  1.5                     1.5                          .0625
    proc StairGenerator(/*1*/float $numSteps, /*2*/float $stepHeight, /*3*/float $stepWidth, /*4*/float $stepDepth, /*5*/float $supportRadius, /*6*/float $stepRotationPercent)
    {
        float $initialPoleTranslation = $stepWidth / -2;        
        float $ceilingHeight = (($stepHeight * 2) * ($numSteps + 2));
        float $initialPoleYTrans = $ceilingHeight / 2;

        float $leftXPivot = ((-1) * ($stepWidth/2));
        float $topYPivot = ($stepHeight/2);

        polyCylinder -r $supportRadius -h $ceilingHeight -sx 20 -sy 1 -sz 1 -ax 0 1 0 -rcp 0 -cuv 3 -ch 1;
        move -r -os  $initialPoleTranslation $initialPoleYTrans 0;

        for ($i = 0; $i < $numSteps; $i++)
        {
            if($i == 0)
            {
                polyCube -w $stepWidth -h $stepHeight -d $stepDepth -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1;
                xform -rp $leftXPivot $topYPivot 0;
                move -r -os  $supportRadius $stepHeight 0;
            }
            else
            {
                float $stepYRotate = (360 * ($stepRotationPercent * $i));
                float $stepYTranslation = (($stepHeight * 2) * ($i + 1));

                polyCube -w $stepWidth -h $stepHeight -d $stepDepth -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1;
                xform -rp $leftXPivot $topYPivot 0;
                rotate -r -os -forceOrder 0 $stepYRotate 0;
                move -r -os  $supportRadius $stepYTranslation 0;
            }
        }
    }
    StairGenerator(/*1*/10, /*2*/.35, /*3*/5, /*4*/1.5, /*5*/1.5, /*6*/.0625);
}
/*{
    //StepCreation(        8,                      .35,                     5,                  1.5                     1.5                           .0625                           0                           0
    proc StairGenerator(float $ceilingHeight, float $stepHeight, float $stepWidth, float $stepDepth, float $supportRadius, float $stepRotationPercent, float $heightReached, float $numSteps)
    {
        float $supportHeight = ($ceilingHeight + ($stepHeight * 6));
        float $initialPoleTranslation = $stepWidth / -2;
        float $stepGrowth = ($stepHeight * 2);

        float $leftXPivot = ((-1) * ($stepWidth/2));
        float $topYPivot = ($stepHeight/2);

        polyCylinder -r $supportRadius -h $supportHeight -sx 20 -sy 1 -sz 1 -ax 0 1 0 -rcp 0 -cuv 3 -ch 1;
        move -r -os  $initialPoleTranslation 0 0;

        do
        {           
            float $heightReached = (($stepHeight * ($numSteps + 1)) + $stepGrowth);   

            if($numSteps == 0)
            {
                polyCube -w $stepWidth -h $stepHeight -d $stepDepth -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1;
                xform -rp $leftXPivot $topYPivot 0;
                move -r -os  $supportRadius $stepHeight 0;

                $numSteps++;
            }
            else
            {
                float $stepYRotate = (360 * ($stepRotationPercent * $numSteps));
                float $stepYTranslation = (($stepHeight * 2) * ($numSteps + 1));

                polyCube -w $stepWidth -h $stepHeight -d $stepDepth -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1;
                xform -rp $leftXPivot $topYPivot 0;
                rotate -r -os -fo 0 $stepYRotate 0;
                move -r -os  $supportRadius $stepYTranslation 0;
                $numSteps++;             
            }
        }
        while($ceilingHeight > $heightReached);
        print($numSteps);
    }
    StairGenerator(8, .35, 5, 1.5, 1.5, .0625, 0, 0);
}*/
// Create a function that generates geometry for a spiral staircase based on user input (arguments).

/* Number of stairs to be created
* Stair depth --> int $stairDepth
* Stair width --> int $stairWidth
* Stair height --> int $stairHeight
* Initial step --> int $step
* Stair amount --> int $stepAmount
* Stair pivot point or offset --> use xform
* Step height --> $riser
* Step rotation --> $rotation
*/

// Step 1: Create the stair
// Step 2: Move the pivot point
// Step 3: Translate and rotate around a central point.
// Bonus: Create a center pole for the steps to "stick" to


/* Clayton's answer to everyone's questions
{
    //global lets us sets a global variable that can then be called from any function
    global string $lastObj;

    for ($i = 0; $i < 10; $i++)
    {
        string $obj[];
        //Creates a polycube that returns (because of these ``) [0 = Objectname, 1 = nodename] to the string array in the next open index num
        $obj = `polycube`;
        // applies the [objectname, 1 is (nodename)] to lastobj
        $lastObj = $obj[0];
        //Sets the objectname of the lastObj for later use
        //sets global varriable that can then be called 
        $lastObj = `rename $lastObj ("Stair_" + ($i+1))`;

        //whatever obj is selected will find it's face value and scale it.
        //must concatinate .f[4] (.face[4]) onto lastobj
        //scale -r -p 0.5cm 0cm 0cm 0.512 0.512 0.512 ($lastObj + ".f[4]");

        //by specifying lastobj at the end, we are selecting the last object and performing the next rotation
        xform -r -os -translation 0 $poHeight 0 $lastObj;
        xform -r -os -rotation 0 $poHeight 0 $lastObj;

        //add 10 to whatever posheight is
        $posHeight += 10;
        //add 20 to whatever rotation is
        $rotation += 20;
    }
    print ($lastObj)
    select -r $lastObj;
}
*/